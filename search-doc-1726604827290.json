[{"title":"API.PassengerDoor","type":0,"sectionRef":"#","url":"/api/API.PassengerDoor","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#functions","content":" "},{"title":"InitializeDoors​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#InitializeDoors","content":"&lt;/&gt; API.PassengerDoor.InitializeDoors( doorsModel: Model -- The model containing the &quot;PassengerDoor&quot; models to initialize. ) → () Initializes the doors within the provided model by assigning a unique ID to each &quot;PassengerDoor&quot; model if it doesn't already have one. Example of usage: -- Reference to the model containing all doors local doorsModel = game.Workspace.DoorsModel -- Initialize all doors to ensure they have unique IDs API.PassengerDoor:InitializeDoors(doorsModel)   "},{"title":"FindPassengerDoor​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#FindPassengerDoor","content":"&lt;/&gt; API.PassengerDoor.FindPassengerDoor( doorsModel: Model ,-- The model containing the passenger doors to search through. doorName: string-- The name of the passenger door model to find. ) → Model? -- Returns the found passenger door model or nil if not found. Finds a passenger door model within the specified doors model by name. The model must be named &quot;PassengerDoor&quot; and contain both &quot;LeftPassengerDoor&quot; and &quot;RightPassengerDoor&quot; children. Example of usage: -- Reference to the model containing all doors local doorsModel = game.Workspace.DoorsModel -- The name of the passenger door model to find local doorName = &quot;PassengerDoor&quot; -- Find the passenger door model local foundDoor = API.PassengerDoor:FindPassengerDoor(doorsModel, doorName) if foundDoor then print(&quot;Found the passenger door model:&quot;, foundDoor.Name) else print(&quot;Passenger door model not found.&quot;) end   "},{"title":"AutomaticOpen​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#AutomaticOpen","content":"&lt;/&gt; API.PassengerDoor.AutomaticOpen( doorsModel: Model ,-- The model containing the passenger doors to open. openDuration: number-- The duration of the door opening animation in seconds. ) → () Automatically opens passenger doors within the specified doors model. The function animates the opening of doors by sliding them to the side. If a door is already open, it skips that door. Example of usage: -- Reference to the model containing all doors local doorsModel = game.Workspace.DoorsModel -- Duration of the door opening animation local duration = 2 -- Automatically open the passenger doors API.PassengerDoor:AutomaticOpen(doorsModel, duration) Note: This function assumes that each passenger door model contains both &quot;LeftPassengerDoor&quot; and &quot;RightPassengerDoor&quot; children. It also assumes that each passenger door model has a PrimaryPart set for correct sliding direction calculation.  "},{"title":"OpenInteractedDoor​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#OpenInteractedDoor","content":"&lt;/&gt; API.PassengerDoor.OpenInteractedDoor( doorsModel: Model ,-- The model containing the passenger doors. doorID: string,-- The unique ID of the door to be opened. openDuration: number-- The duration of the door opening animation in seconds. ) → () Opens a specific passenger door identified by its unique ID. Ensures that all doors have unique IDs before attempting to open the specified door. This function also animates the door opening using a sliding effect. Note: The function assumes that each PassengerDoor model contains LeftPassengerDoor and RightPassengerDoor as child models. Ensure that all doors are initialized with unique IDs using the InitializeDoors function. Example: local pPrompt = script.Parent:FindFirstChildOfClass(&quot;ProximityPrompt&quot;) local doorModel = script.Parent:FindFirstChild(&quot;PassengerDoor&quot;) -- Ensure that the proximity prompt is valid if not pPrompt or not doorModel then warn(&quot;ProximityPrompt or door model not found!&quot;) return end -- Function to handle the proximity prompt action local function onPromptTriggered() -- Initialize doors to ensure they have unique IDs api.PassengerDoor:InitializeDoors(doorModel.Parent) -- Assumes all doors are parented to the same model -- Pull the uniqueID from the door model local uniqueID = doorModel:FindFirstChild(&quot;UniqueID&quot;) if uniqueID then local doorID = uniqueID.Value local openDuration = 2.5 api.PassengerDoor:OpenInteractedDoor(doorModel.Parent, doorID, openDuration) else warn(&quot;UniqueID not found in the door model!&quot;) end end -- Connect the proximity prompt action to the function pPrompt.Triggered:Connect(onPromptTriggered)   "},{"title":"Close​","type":1,"pageTitle":"API.PassengerDoor","url":"/api/API.PassengerDoor#Close","content":"&lt;/&gt; API.PassengerDoor.Close( doorsModel: Model ,-- The model containing the passenger doors. minCloseDuration: number,-- The minimum duration (in seconds) for the door closing animation. maxCloseDuration: number-- The maximum duration (in seconds) for the door closing animation. ) → () Closes all passenger doors in the given model that are currently open. The function calculates and applies a random duration for each door's closing animation, ensuring a varied and natural closing effect. Note: The function looks for doors that have the DoorOpen property set to true. The doors are closed by animating their movement from the open position back to the closed position. Example: local api = require(game.ServerScriptService:WaitForChild(&quot;TXTR | API&quot;)) local doorsModel = game.Workspace.DoorsModel -- Ensure doors are initialized with unique IDs (if needed) api.PassengerDoor:InitializeDoors(doorsModel) -- Define the minimum and maximum close durations for the animation local minCloseDuration = 1.5 local maxCloseDuration = 3.0 -- Close all open passenger doors with random animation durations api.PassengerDoor:Close(doorsModel, minCloseDuration, maxCloseDuration)  "},{"title":"API","type":0,"sectionRef":"#","url":"/api/API","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"API","url":"/api/API#functions","content":" "},{"title":"createTween​","type":1,"pageTitle":"API","url":"/api/API#createTween","content":"&lt;/&gt; API.createTween( part: BasePart ,-- The BasePart to tween goalPosition: Vector3 ,-- The target position of the part duration: number,-- Duration of the tween in seconds easingStyle: Enum.EasingStyle,-- The easing style for the tween easingDirection: Enum.EasingDirection-- The easing direction for the tween ) → Tween -- The created Tween instance Function to create a tween for a part's position Example of usage: -- Reference to a part in the game local part = game.Workspace.Part -- Parameters for the tween local targetPosition = Vector3.new(10, 5, 0) local tweenDuration = 3 local easingStyle = Enum.EasingStyle.Quint local easingDirection = Enum.EasingDirection.Out -- Create a tween using the function from TweenModule local tween = TweenModule.createTween(part, targetPosition, tweenDuration, easingStyle, easingDirection) -- Play the tween tween:Play() -- Optionally, handle when the tween completes tween.Completed:Connect(function() print(&quot;Tween animation completed!&quot;) end)   "},{"title":"moveModel​","type":1,"pageTitle":"API","url":"/api/API#moveModel","content":"&lt;/&gt; API.moveModel( model: Model ,-- The Model containing the parts to tween displacement: Vector3 ,-- The distance to move each part duration: number,-- Duration of the tween in seconds easingStyle: Enum.EasingStyle,-- The easing style for the tween easingDirection: Enum.EasingDirection-- The easing direction for the tween ) → table-- A table containing all created Tween instances Function to move the entire model with specified easing style and duration. Example of usage: -- Reference to a model in the game local model = game.Workspace.Model -- Parameters for the tween local displacement = Vector3.new(10, 0, 0) local tweenDuration = 3 local easingStyle = Enum.EasingStyle.Cubic local easingDirection = Enum.EasingDirection.InOut -- Move the model using the function from API local tweens = API.moveModel(model, displacement, tweenDuration, easingStyle, easingDirection) -- Play all the tweens for _, tween in pairs(tweens) do tween:Play() end -- Optionally, handle when all tweens complete for _, tween in pairs(tweens) do tween.Completed:Connect(function() print(&quot;Tween animation completed for part:&quot;, tween.Instance.Name) end) end   "},{"title":"getLocalDisplacement​","type":1,"pageTitle":"API","url":"/api/API#getLocalDisplacement","content":"&lt;/&gt; API.getLocalDisplacement( part: BasePart ,-- The part to calculate the local displacement for distance: number-- The distance to slide the part ) → Vector3 -- The local displacement vector Calculates the local displacement for sliding to ensure it's always animating correctly, no matter the current orientation of the doors within workspace. Example of usage: -- Reference to a part in the game local part = game.Workspace.Part -- Distance to slide the part local slideDistance = 5 -- Get the local displacement vector using the function from API local displacement = API.getLocalDisplacement(part, slideDistance) -- Move the part using the displacement vector part.Position = part.Position + displacement  "}]