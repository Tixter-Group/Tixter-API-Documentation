"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[189],{4479:e=>{e.exports=JSON.parse('{"functions":[{"name":"InitializeDoors","desc":"Initializes the doors within the provided model by assigning a unique ID to each \\"PassengerDoor\\" model if it doesn\'t already have one.\\n\\n\\n**Example of usage**:\\n```lua\\n-- Reference to the model containing all doors\\nlocal doorsModel = game.Workspace.DoorsModel\\n\\n-- Initialize all doors to ensure they have unique IDs\\nAPI.PassengerDoor:InitializeDoors(doorsModel)\\n```","params":[{"name":"doorsModel","desc":"The model containing the \\"PassengerDoor\\" models to initialize.","lua_type":"Model"}],"returns":[],"function_type":"static","source":{"line":142,"path":"src/API.lua"}},{"name":"FindPassengerDoor","desc":"Finds a passenger door model within the specified doors model by name. The model must be named \\"PassengerDoor\\" and contain both \\"LeftPassengerDoor\\" and \\"RightPassengerDoor\\" children.\\n\\n\\n\\n**Example of usage**:\\n```lua\\n-- Reference to the model containing all doors\\nlocal doorsModel = game.Workspace.DoorsModel\\n\\n-- The name of the passenger door model to find\\nlocal doorName = \\"PassengerDoor\\"\\n\\n-- Find the passenger door model\\nlocal foundDoor = API.PassengerDoor:FindPassengerDoor(doorsModel, doorName)\\n\\nif foundDoor then\\n    print(\\"Found the passenger door model:\\", foundDoor.Name)\\nelse\\n    print(\\"Passenger door model not found.\\")\\nend\\n```","params":[{"name":"doorsModel","desc":"The model containing the passenger doors to search through.","lua_type":"Model"},{"name":"doorName","desc":"The name of the passenger door model to find.","lua_type":"string"}],"returns":[{"desc":"Returns the found passenger door model or nil if not found.","lua_type":"Model?"}],"function_type":"static","source":{"line":172,"path":"src/API.lua"}},{"name":"AutomaticOpen","desc":"Automatically opens passenger doors within the specified doors model. The function animates the opening of doors by sliding them to the side. If a door is already open, it skips that door.\\n\\n\\n**Example of usage**:\\n```lua\\n-- Reference to the model containing all doors\\nlocal doorsModel = game.Workspace.DoorsModel\\n\\n-- Duration of the door opening animation\\nlocal duration = 2\\n\\n-- Automatically open the passenger doors\\nAPI.PassengerDoor:AutomaticOpen(doorsModel, duration)\\n```\\n\\n**Note**: This function assumes that each passenger door model contains both \\"LeftPassengerDoor\\" and \\"RightPassengerDoor\\" children. It also assumes that each passenger door model has a `PrimaryPart` set for correct sliding direction calculation.","params":[{"name":"doorsModel","desc":"The model containing the passenger doors to open.","lua_type":"Model"},{"name":"openDuration","desc":"The duration of the door opening animation in seconds.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":196,"path":"src/API.lua"}},{"name":"OpenInteractedDoor","desc":"Opens a specific passenger door identified by its unique ID. Ensures that all doors have unique IDs before attempting to open the specified door. This function also animates the door opening using a sliding effect.\\n\\n\\n**Note**: The function assumes that each `PassengerDoor` model contains `LeftPassengerDoor` and `RightPassengerDoor` as child models. Ensure that all doors are initialized with unique IDs using the `InitializeDoors` function.\\n\\n**Example**:\\n```lua\\nlocal pPrompt = script.Parent:FindFirstChildOfClass(\\"ProximityPrompt\\")\\nlocal doorModel = script.Parent:FindFirstChild(\\"PassengerDoor\\")\\n\\n-- Ensure that the proximity prompt is valid\\nif not pPrompt or not doorModel then\\n    warn(\\"ProximityPrompt or door model not found!\\")\\n    return\\nend\\n\\n-- Function to handle the proximity prompt action\\nlocal function onPromptTriggered()\\n    -- Initialize doors to ensure they have unique IDs\\n    api.PassengerDoor:InitializeDoors(doorModel.Parent) -- Assumes all doors are parented to the same model\\n\\n    -- Pull the uniqueID from the door model\\n    local uniqueID = doorModel:FindFirstChild(\\"UniqueID\\")\\n    if uniqueID then\\n        local doorID = uniqueID.Value\\n        local openDuration = 2.5\\n        api.PassengerDoor:OpenInteractedDoor(doorModel.Parent, doorID, openDuration)\\n    else\\n        warn(\\"UniqueID not found in the door model!\\")\\n    end\\nend\\n\\n-- Connect the proximity prompt action to the function\\npPrompt.Triggered:Connect(onPromptTriggered)\\n```","params":[{"name":"doorsModel","desc":"The model containing the passenger doors.","lua_type":"Model"},{"name":"doorID","desc":"The unique ID of the door to be opened.","lua_type":"string"},{"name":"openDuration","desc":"The duration of the door opening animation in seconds.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":240,"path":"src/API.lua"}},{"name":"Close","desc":"Closes all passenger doors in the given model that are currently open. The function calculates and applies a random duration for each door\'s closing animation, ensuring a varied and natural closing effect.\\n\\n\\n**Note**: The function looks for doors that have the `DoorOpen` property set to true. The doors are closed by animating their movement from the open position back to the closed position.\\n\\n**Example**:\\n```lua\\nlocal api = require(game.ServerScriptService:WaitForChild(\\"TXTR | API\\"))\\nlocal doorsModel = game.Workspace.DoorsModel\\n\\n-- Ensure doors are initialized with unique IDs (if needed)\\napi.PassengerDoor:InitializeDoors(doorsModel)\\n\\n-- Define the minimum and maximum close durations for the animation\\nlocal minCloseDuration = 1.5\\nlocal maxCloseDuration = 3.0\\n\\n-- Close all open passenger doors with random animation durations\\napi.PassengerDoor:Close(doorsModel, minCloseDuration, maxCloseDuration)\\n```","params":[{"name":"doorsModel","desc":"The model containing the passenger doors.","lua_type":"Model"},{"name":"minCloseDuration","desc":"The minimum duration (in seconds) for the door closing animation.","lua_type":"number"},{"name":"maxCloseDuration","desc":"The maximum duration (in seconds) for the door closing animation.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":269,"path":"src/API.lua"}}],"properties":[],"types":[],"name":"API.PassengerDoor","desc":"The main class for managing passenger doors.\\n\\nProvides methods for initializing, finding, and automatically opening or closing passenger doors.","source":{"line":122,"path":"src/API.lua"}}')}}]);